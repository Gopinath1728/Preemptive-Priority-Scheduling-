#include<stdio.h>
struct process_data
{
int pid,arr_time,serv_time,end_time,prio_key;
};
void swap(struct process_data* p1,struct process_data* p2)
 {    struct process_data temp = *p1; 
    *p1 = *p2; 
    *p2 = temp; 
}
int partition (struct process_data rqueue[], int low, int high) 
{     int pivot = rqueue[high].prio_key;
    int i = (low - 1),j; 
for (j = low; j <= high- 1; j++) 
{ if (rqueue[j].prio_key > pivot || (rqueue[i].prio_key == rqueue[j].prio_key && rqueue[i].end_time >     rqueue[j].end_time)) { 
	            i++; 
	            swap(&rqueue[i], &rqueue[j]); 
	        } 
 } 
    swap(&rqueue[i + 1], &rqueue[high]); 
    return (i + 1); 
} 
void quickSort(struct process_data rqueue[], int low, int high) 
{ 
    if (low < high) { 
        int pi = partition(rqueue, low, high); 
        quickSort(rqueue, low, pi - 1); 
        quickSort(rqueue, pi + 1, high); 
    } 
} 
void process_execute(struct process_data process[],int no_of_proc)
{
struct process_data ready_queue[no_of_proc];
int i,j,rqcount=0,burst = 0,sum=0,unCompPro=no_of_proc;
	while(unCompPro !=0 )
{
	for(i=0;i<no_of_proc;i++)
              {
                if(burst == process[i].arr_time){  
	ready_queue[rqcount] = process[i];
	rqcount++;
	}
}
quickSort(ready_queue,0,rqcount-1);
ready_queue[0].serv_time--;
ready_queue[0].end_time = burst;
ready_queue[0].prio_key += 1;
for(j=1;j<rqcount;j++)
ready_queue[j].prio_key += 2;
if(ready_queue[0].serv_time == 0){
sum += (ready_queue[0].end_time-ready_queue[0].arr_time-process[ready_queue[0].pid-1].serv_time)+1; 
--unCompPro;
for(j=0;j<rqcount-1;j++)	
ready_queue[j] = ready_queue[j+1];
rqcount--;
}
burst++;
}
printf("Average Waiting time for each process is %f sec: ",(float)sum/no_of_proc);		
}
int main()
{
int i,no_of_proc;	
printf("Enter no. of process to create & PID should be different : ");		
scanf("%d",&no_of_proc);
struct process_data process[no_of_proc];
for(i=0;i<no_of_proc;i++){
printf("Enter Pid | arrival_Time | service_Time for %d Process: ",i+1);
scanf("%d%d%d",&process[i].pid,&process[i].arr_time,&process[i].serv_time);
process[i].end_time = process[i].prio_key = 0;	
}	
process_execute(process,no_of_proc);
return 0;	}
